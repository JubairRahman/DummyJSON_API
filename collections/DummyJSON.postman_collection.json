{
	"info": {
		"_postman_id": "36dfc5d6-a724-4a1b-a9f6-126475f9a088",
		"name": "DummyJSON",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24754876",
		"_collection_link": "https://www.postman.com/api-astronauts/workspace/api-projects/collection/24754876-36dfc5d6-a724-4a1b-a9f6-126475f9a088?action=share&source=collection_link&creator=24754876"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();",
									"",
									"if (jsonData.accessToken) {",
									"    pm.environment.set(\"accessToken\", jsonData.accessToken);",
									"    pm.environment.set(\"refreshToken\", jsonData.refreshToken);",
									"    pm.environment.set(\"userId\", jsonData.id);",
									"    pm.environment.set(\"username\", jsonData.username);",
									"    console.log(\"✅ Access token saved:\", jsonData.accessToken);",
									"} else {",
									"    console.log(\"❌ Token not found in login response\");",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"emilys\",\n    \"password\": \"emilyspass\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Refresh Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Refresh returns new accessToken\", function () {\r",
									"    pm.expect(jsonData.accessToken).to.exist;\r",
									"    pm.expect(jsonData.refreshToken).to.exist;\r",
									"});\r",
									"\r",
									"pm.environment.set(\"accessToken\", jsonData.accessToken);\r",
									"pm.environment.set(\"refreshToken\", jsonData.refreshToken);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"refreshToken\": \"{{refreshToken}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/refresh",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"refresh"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid Login",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Invalid User\",\r\n    \"password\": \"wrong password\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Profile",
			"item": [
				{
					"name": "my-profile",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let token = pm.environment.get(\"accessToken\");\r",
									"if (token) {\r",
									"    pm.request.headers.add({key: \"Authorization\", value: `Bearer ${token}`});\r",
									"} else {\r",
									"    console.log(\"⚠️ No access token found in environment.\");\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has username\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"username\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/auth/me",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"me"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Tests & Errors",
			"item": []
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "user-lists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has users array\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.users).to.be.an(\"array\");\r",
									"    pm.expect(jsonData.users.length).to.be.greaterThan(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "users/userId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has correct user id\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.eql(parseInt(pm.environment.get(\"userId\")));\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "user-Add",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains new user id\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.be.a(\"number\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \r\n    \"firstName\": \"Jubair\",\r\n    \"lastName\": \"Jubu\",\r\n    \"age\": 30,\r\n    \"username\": \"jubairjubu\",\r\n    \"gender\": \"male\",\r\n    \"phone\": \"01645763353\",\r\n    \"password\": \"jubu123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/add",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "users-id",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"age\": 31\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete-user",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Utilities",
			"item": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"let token = pm.environment.get(\"accessToken\");\r",
					"if (token) {\r",
					"    pm.request.headers.add({key: \"Authorization\", value: `Bearer ${token}`});\r",
					"} else {\r",
					"    console.log(\"⚠️ No access token found in environment.\");\r",
					"}\r",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}